// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service/post/proto/entities/entities.proto

/*
Package entities is a generated protocol buffer package.

It is generated from these files:
	service/post/proto/entities/entities.proto

It has these top-level messages:
	Post
*/
package entities

import context "context"
import fmt "fmt"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import go_uuid1 "github.com/satori/go.uuid"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"
import types1 "github.com/infobloxopen/protoc-gen-gorm/types"

import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type PostORM struct {
	BoardId   *string       `gorm:"not null;index:idx_posts_board"`
	Category  *string       `gorm:"not null"`
	Content   string        `gorm:"not null"`
	CreatedAt *time.Time    `gorm:"not null"`
	DeletedAt *time.Time    `gorm:"index:idx_posts_deleted_at"`
	Email     string        `gorm:"not null"`
	Id        go_uuid1.UUID `gorm:"type:uuid;primary_key;unique;not null"`
	Password  *string
	Title     *string    `gorm:"not null"`
	UpdatedAt *time.Time `gorm:"not null"`
	Writer    string     `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (PostORM) TableName() string {
	return "posts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Post) ToORM(ctx context.Context) (PostORM, error) {
	to := PostORM{}
	var err error
	if prehook, ok := interface{}(m).(PostWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid1.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid1.Nil
	}
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.DeletedAt); err != nil {
			return to, err
		}
		to.DeletedAt = &t
	}
	if m.BoardId != nil {
		v := m.BoardId.Value
		to.BoardId = &v
	}
	if m.Title != nil {
		v := m.Title.Value
		to.Title = &v
	}
	if m.Category != nil {
		v := m.Category.Value
		to.Category = &v
	}
	if m.Password != nil {
		v := m.Password.Value
		to.Password = &v
	}
	to.Content = m.Content
	to.Email = m.Email
	to.Writer = m.Writer
	if posthook, ok := interface{}(m).(PostWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *PostORM) ToPB(ctx context.Context) (Post, error) {
	to := Post{}
	var err error
	if prehook, ok := interface{}(m).(PostWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types1.UUID{Value: m.Id.String()}
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	if m.DeletedAt != nil {
		if to.DeletedAt, err = ptypes1.TimestampProto(*m.DeletedAt); err != nil {
			return to, err
		}
	}
	if m.BoardId != nil {
		to.BoardId = &google_protobuf1.StringValue{Value: *m.BoardId}
	}
	if m.Title != nil {
		to.Title = &google_protobuf1.StringValue{Value: *m.Title}
	}
	if m.Category != nil {
		to.Category = &google_protobuf1.StringValue{Value: *m.Category}
	}
	if m.Password != nil {
		to.Password = &google_protobuf1.StringValue{Value: *m.Password}
	}
	to.Content = m.Content
	to.Email = m.Email
	to.Writer = m.Writer
	if posthook, ok := interface{}(m).(PostWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Post the arg will be the target, the caller the one being converted from

// PostBeforeToORM called before default ToORM code
type PostWithBeforeToORM interface {
	BeforeToORM(context.Context, *PostORM) error
}

// PostAfterToORM called after default ToORM code
type PostWithAfterToORM interface {
	AfterToORM(context.Context, *PostORM) error
}

// PostBeforeToPB called before default ToPB code
type PostWithBeforeToPB interface {
	BeforeToPB(context.Context, *Post) error
}

// PostAfterToPB called after default ToPB code
type PostWithAfterToPB interface {
	AfterToPB(context.Context, *Post) error
}

// DefaultCreatePost executes a basic gorm create call
func DefaultCreatePost(ctx context.Context, in *Post, db *gorm1.DB) (*Post, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type PostORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadPost executes a basic gorm read call
func DefaultReadPost(ctx context.Context, in *Post, db *gorm1.DB) (*Post, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &PostORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := PostORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(PostORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type PostORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeletePost(ctx context.Context, in *Post, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid1.Nil {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&PostORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type PostORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeletePostSet(ctx context.Context, in []*Post, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []go_uuid1.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid1.Nil {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&PostORM{})).(PostORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&PostORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&PostORM{})).(PostORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type PostORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Post, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Post, *gorm1.DB) error
}

// DefaultStrictUpdatePost clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdatePost(ctx context.Context, in *Post, db *gorm1.DB) (*Post, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdatePost")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &PostORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(PostORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type PostORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchPost executes a basic gorm update call with patch behavior
func DefaultPatchPost(ctx context.Context, in *Post, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Post, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Post
	var err error
	if hook, ok := interface{}(&pbObj).(PostWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadPost(ctx, &Post{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(PostWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskPost(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(PostWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdatePost(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(PostWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type PostWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Post, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type PostWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Post, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type PostWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Post, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type PostWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Post, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetPost executes a bulk gorm update call with patch behavior
func DefaultPatchSetPost(ctx context.Context, objects []*Post, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Post, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Post, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchPost(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskPost patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskPost(ctx context.Context, patchee *Post, patcher *Post, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Post, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"DeletedAt" {
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
		if f == prefix+"BoardId" {
			patchee.BoardId = patcher.BoardId
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Category" {
			patchee.Category = patcher.Category
			continue
		}
		if f == prefix+"Password" {
			patchee.Password = patcher.Password
			continue
		}
		if f == prefix+"Content" {
			patchee.Content = patcher.Content
			continue
		}
		if f == prefix+"Email" {
			patchee.Email = patcher.Email
			continue
		}
		if f == prefix+"Writer" {
			patchee.Writer = patcher.Writer
			continue
		}
		if f == prefix+"CommentCounts" {
			patchee.CommentCounts = patcher.CommentCounts
			continue
		}
		if f == prefix+"ReadCounts" {
			patchee.ReadCounts = patcher.ReadCounts
			continue
		}
		if f == prefix+"UpVoteCounts" {
			patchee.UpVoteCounts = patcher.UpVoteCounts
			continue
		}
		if f == prefix+"DownVoteCounts" {
			patchee.DownVoteCounts = patcher.DownVoteCounts
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListPost executes a gorm list call
func DefaultListPost(ctx context.Context, db *gorm1.DB) ([]*Post, error) {
	in := Post{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &PostORM{}, &Post{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []PostORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PostORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Post{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type PostORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type PostORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]PostORM) error
}
